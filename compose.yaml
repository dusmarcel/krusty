services:
  db:
    container_name: db
    image: postgres:alpine
    env_file: .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  valkey:
    container_name: valkey
    image: valkey:alpine
    command: valker-server --save 60 1 --loglevel warning
    volumes:
      - valkeydata:/data
  backend:
    container_name: backend
    env_file: .env
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        POSTGRES_HOST: $POSTGRES_HOST
        POSTGRES_DATABASE: $POSTGRES_DATABASE
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        BACKEND_IF: $BACKEND_IF
      target: final
    develop:
      watch:
        - action: rebuild
          path: ./backend
        - action: rebuild
          path: ./shared
    ports:
      - 127.0.0.1:8161:8161
    depends_on:
      - db:
        condition: service_healthy
      - valkey
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BACKEND_PROTOCOL: $BACKEND_PROTOCOL
        BACKEND_HOST: $BACKEND_HOST
        BACKEND_PORT: $BACKEND_PORT
      target: final
    develop:
      watch:
        - action: rebuild
          path: ./frontend
    ports:
      - 127.0.0.1:8162:80

volumes:
  pgdata:
  valkeydata:
